---
title: "Unicare/MIIA comparisons, models"
#author:
#date: 2024/06/23
format:
  html:
    fig.height: 2
    fig.width: 7
    fig-format: png
    fig-dpi: 300
editor_options:
  chunk_output_type: console
---

```{r knitr, warning=FALSE, echo = FALSE, include=FALSE}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  cache = FALSE,
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.show = TRUE,
  hiline = TRUE,
  require("knitr")
)

```

```{r, echo=FALSE, warning=FALSE, include=FALSE}
library(survival)
library(tidyverse)
library(tidymodels)
#library(ggsurvfit)
library(lubridate)
#library(ggfortify)
library(lmtest)

library(car)
library(poissonreg)

library(pscl)

library(broom)
library(broom.mixed)

```

```{r}
#| echo: false
#| label: read-files

source("data_read.R")

```

```{r}
#| label: get-unicare-patients

term <- 0  ## number of days using ibis. Eventually we will want set threshold.
lag <- term

ibis_term <- df %>%
    filter(str_detect(org_name, "Unicare")) %>%
    filter(last_reminder_complete_date - first_reminder_complete_date > term) %>%
    mutate(days = last_reminder_complete_date - first_reminder_complete_date)

ibis_patients_term <- ibis_term %>%
    select(pid) %>% distinct() %>% mutate(cohort = "Unicare")

```

```{r, echo=FALSE}
#| label: MIIA term

# Note for the Aug 2024 data none of the MIIA were no-ibis

MIIA_term_no_ibis <- df %>% filter(str_detect(org_name, "MIIA")) %>%
    filter(is.na(first_reminder_complete_date)) %>%
    filter(coverage_end_date - coverage_start_date > term) %>%
    mutate(days = coverage_end_date - coverage_start_date)

MIIA_patients_term_no_ibis <- MIIA_term_no_ibis %>%
    select(pid) %>% distinct()

MIIA_term_ibis <- df %>% filter(str_detect(org_name, "MIIA")) %>%
    filter(!is.na(first_reminder_complete_date)) %>%
    filter(first_reminder_complete_date - coverage_start_date > term) %>%
    mutate(days = first_reminder_complete_date - coverage_start_date)

MIIA_patients_term_ibis <- MIIA_term_ibis %>%
    select(pid) %>% distinct()

MIIA_patients_term <- rbind(MIIA_patients_term_no_ibis, MIIA_patients_term_ibis)  %>%
    mutate(cohort = "MIIA")

MIIA_term <- rbind(MIIA_term_no_ibis, MIIA_term_ibis) # %>%
    # mutate(group = ifelse(pid %in% MIIA_patients_term_ibis$pid, "pre Ibis", "no Ibis"))

###


```

```{r, echo=FALSE}
#| label: ibis_events
### Ibis summaries
## round inpatient days
ibis_events <- df %>%
    filter(term == 0 & event_start_date > first_reminder_complete_date |
           term != 0 & event_start_date > first_reminder_complete_date &
                       event_start_date < first_reminder_complete_date + term)

    # Old:
    # filter(event_start_date > first_reminder_complete_date) # %>% ### term here!!
    # filter(event_start_date < first_reminder_complete_date + term)

### ### This breaks if one of the outcomes does not appear; eg. if term is large.

event_list <- c("emergency", "inpatient") ## in case one or more are missing

 ibis_counts <- ibis_events %>%
     mutate(event_type = factor(event_type, levels = event_list)) %>%
    group_by(pid, event_type)  %>%
    summarize(count = n(), .groups = "drop") %>%
    pivot_wider(names_from = event_type, values_from = count)  %>%
    replace(is.na(.), 0)

ibis_admit_days <- ibis_events %>%
     group_by(pid) %>% summarize(inpatient_days = round(sum(event_duration_days), 0))

ibis_events_pre <- ibis_counts %>%
    full_join(ibis_admit_days, by = "pid")

ibis_event_summary <- ibis_patients_term %>% left_join(ibis_events_pre, by = "pid") %>%
    replace(is.na(.), 0) %>%
    select(pid, emergency, inpatient, inpatient_days)

#########
```

```{r, echo=FALSE}
#| label: MIIA_events

## Get MIIA events summaries

#lag <- 439

  ## ultimately

MIIA_events_no_ibis <- MIIA_term_no_ibis %>%
    filter(term == 0 & event_start_date > coverage_start_date |
           term !=0 & event_start_date > coverage_start_date &
                      event_start_date < coverage_start_date + lag)


MIIA_events_ibis <- MIIA_term_ibis %>%
    filter(term == 0 & event_start_date < first_reminder_complete_date |
           term !=0 & event_start_date < first_reminder_complete_date &
                      event_start_date < coverage_start_date + lag)
### Old:
####
#MIIA_events_no_ibis <- MIIA_term_no_ibis # %>%
   # filter(event_start_date < coverage_start_date  + lag)

   #MIIA_events_ibis <- MIIA_term_ibis %>%
  #  filter(event_start_date < coverage_start_date + lag) %>%
    #filter(event_start_date < first_reminder_complete_date) # Wont need to do this when term>0 and lag = term
 ###
####
```

```{r}
### This breaks if one of the outcomes does not appear; eg. if term is large.
MIIA_events <- rbind(MIIA_events_no_ibis, MIIA_events_ibis)

event_list <- c("emergency", "inpatient") ## in case one or more are missing. But creates NA column

MIIA_counts <- MIIA_events %>%
    mutate(event_type = factor(event_type, levels = event_list)) %>%
    group_by(pid, event_type)  %>%
    summarize(count = n(), .groups = "drop") %>%
    pivot_wider(names_from = event_type, values_from = count) %>%
    replace(is.na(.), 0)

MIIA_admit_days <- MIIA_events %>%
     group_by(pid) %>% summarize(inpatient_days = round(sum(event_duration_days), 0))

MIIA_events_pre <- MIIA_counts %>%
    full_join(MIIA_admit_days, by = "pid")

MIIA_event_summary <- MIIA_patients_term %>% left_join(MIIA_events_pre, by = "pid") %>%
    replace(is.na(.), 0) %>%
    select(pid, emergency, inpatient, inpatient_days)


```

```{r, echo=FALSE}
#| label: patient data
## Get patient data, HCC scores, observation times

df_aug <- read_csv("../data/2024-08-28_utilization_report.csv")

idx_0 <- which(names(df_aug) == "condition_count")
 idx_1 <- which(names(df_aug) == "urologic_cancer")

 cohorts <- rbind(ibis_patients_term, MIIA_patients_term)

 cohorts$cohort <- as.factor(cohorts$cohort)

 patients <- df_aug %>% select(pid, age, hcc, c(idx_0:idx_1)) %>% distinct(pid, .keep_all = TRUE) %>% filter(pid %in% cohorts$pid)

 hcc_scores <- patients %>% select(pid, hcc)

obs_times <- rbind(ibis_term, MIIA_term) %>% select(pid, days) %>% distinct()

```

-   **Unicare** combined with **Unicare-study** vs **MIIA**

There are `r term` minimum number of days under observation.

```{r}
#fig.width=4, fig.height=2}
#| label: days distributions
days <- obs_times %>% inner_join(cohorts, by = "pid")

```

#### Age, days and HCC score distributions

```{r}
#| label: boxplots

cohorts %>% inner_join(patients, by = "pid") %>%
    inner_join(days, by = c("pid", "cohort")) %>%
    select(cohort, age, hcc, days) %>% mutate(days = as.numeric(days)) %>%
    pivot_longer(cols = c(age, hcc, days), names_to = "variable", values_to = "value") %>%
    ggplot(aes(y = value, color = cohort)) +
    geom_boxplot() +
    facet_wrap(~variable, scales = "free_y")



```

```{r}
#| label: density

cohorts %>% inner_join(patients, by = "pid") %>%
    inner_join(days, by = c("pid", "cohort")) %>%
    select(cohort, age, hcc, days) %>% mutate(days = as.numeric(days)) %>%
    pivot_longer(cols = c(age, hcc, days), names_to = "variable", values_to = "value") %>%
    ggplot(aes(x = value, fill = cohort)) +
    geom_density(alpha = 0.5) +
    facet_wrap(~variable, scales = "free")

```

```{r}
#| label: sum_stats
cohorts %>% inner_join(patients, by = "pid") %>%
    inner_join(days, by = c("pid", "cohort")) %>%
    select(cohort, age, hcc, days) %>% group_by(cohort) %>%
    summarize(n = n(),
              median_age = round(median(age),0),
              mean_days = round(mean(days), 0),
              mean_hcc = round(mean(hcc, na.rm = TRUE), 2)
              )  %>% kable()
```

#### Days under observation by cohort

```{r}
#| label: days_obs

days %>% group_by(cohort) %>%
    summarize(n = n(),
              mean_days = round(mean(days), 0),
              sd_days = round(sd(days), 0),
              min = min(days),
              max = max(days)) %>% kable()
```

```{r}
days_num <- days %>% mutate(days = as.numeric(days))
```

There are `r sum(days_num$days == 1)` Unicare patients with a single day.

#### Condition counts

```{r, echo=FALSE}
#, fig.width=4, fig.height=1.5}
#| label: condition counts

cohorts %>%
    left_join(patients, by = "pid") %>%
    ggplot(aes(x = condition_count, fill = cohort)) +
    geom_bar(aes(y = ..prop..), position = "dodge", color = "white") +
    scale_x_continuous(breaks = seq(min(patients$condition_count), max(patients$condition_count))) +
    labs(x = "Condition count", y = "Proportion", fill = "Cohort")
```

```{r, echo=FALSE}
#| label: cond count stats

cohorts %>%  left_join(patients, by = "pid") %>% group_by(cohort) %>%
    summarize(n = n(),
              mean = round(mean(condition_count), 1),
              sd = round(sd(condition_count), 1)) %>%        kable()
```

#### HCC scores

```{r}
#| label: hcc scores
 cohorts %>%  left_join(patients, by = "pid") %>% group_by(cohort) %>%
    summarize(n = n(),
              mean = round(mean(hcc, na.rm = TRUE), 1),
              sd = round(sd(hcc, na.rm = TRUE), 1)) %>%        kable()

```

------------------------------------------------------------------------

## Outcomes

```{r, echo = FALSE}
#| label: proportion admit by hcc quartiles

## Combine Ibis, MIIA event summaries; add HCC scores and observation times



events <- rbind(ibis_event_summary, MIIA_event_summary) %>%
         #filter(inpatient_days < 30) %>%
                inner_join(obs_times, by = "pid") %>%
                mutate(inpatient_days_per_1000 = 1000*inpatient_days/as.numeric(days)) %>%
                 mutate(admits_per_1000 = 1000*inpatient/as.numeric(days)) %>%
               mutate(ER_per_1000 = 1000*emergency/as.numeric(days)) %>%
                mutate(inpatient_admit= case_when(
                    inpatient == 0 ~ 0,
                    inpatient != 0 ~ 1
                      )) %>%
     mutate(no_utilization = ifelse(inpatient + emergency == 0, 1, 0))

```

#### ER proportions

```{r, echo=FALSE}
#| label: ER counts

events %>%
    left_join(cohorts, by = "pid") %>%
    ggplot(aes(x = emergency, fill = cohort)) +
    geom_bar(aes(y = ..prop..), position = "dodge", color = "white") +
    scale_x_continuous(breaks = seq(min(patients$condition_count), max(patients$condition_count))) +
    labs(x = "ER count", y = "Proportion", fill = "Cohort")
```

#### Inpatient admits proportions

```{r, echo=FALSE}
#, fig.width=4, fig.height=1.5}
#| label: admit counts

events %>%
    left_join(cohorts, by = "pid") %>%
    ggplot(aes(x = inpatient, fill = cohort)) +
    geom_bar(aes(y = ..prop..), position = "dodge", color = "white") +
    scale_x_continuous(breaks = seq(min(patients$condition_count), max(patients$condition_count))) +
    labs(x = "Admits", y = "Proportion", fill = "Cohort")
```

#### Outliers

Condition counts $\geq$ 10, inpatient days $\geq$ 20

```{r}
events_filt <- events %>% filter(inpatient_days < 20)
patients_filt <- patients %>% filter(condition_count < 10 )

dff <- cohorts %>%  inner_join(patients, by = "pid") %>%
    inner_join(events, by = c("pid"))

dff_filt <- cohorts %>%  inner_join(patients_filt, by = "pid") %>%
    inner_join(events_filt, by = c("pid"))
```

```{r}
library(skimr)
dff %>% filter(inpatient_days >= 20 | condition_count >= 10) %>%
    select(cohort, age, condition_count, inpatient_days) %>%
    print(n = 29)
```

#### Missing HCC

```{r}
missing_hcc <- patients %>% filter(is.na(hcc)) %>% select(pid) %>% nrow()
missing_hcc_MIIA <- patients %>% filter(is.na(hcc)) %>% select(pid)  %>%
    left_join(cohorts, by = "pid") %>% filter(cohort == "MIIA") %>% nrow()
missing_hcc_Unicare <- patients %>% filter(is.na(hcc)) %>% select(pid)  %>%
    left_join(cohorts, by = "pid") %>% filter(cohort == "Unicare") %>% nrow()
```

There are `r missing_hcc` missing HCC scores.

There are `r missing_hcc_MIIA` missing from MIIA

There are `r missing_hcc_Unicare` missing from Unicare

We can impute these later.

```{r}
#| label: hcc_missing
 dff %>% group_by(cohort) %>%
    summarize(n = n(),
              missing_hcc = sum(is.na(hcc))) %>% kable()
```

#### Inpatient days vs HCC counts, by cohort, filtered or not

```{r}
dff %>%  ggplot(aes(as.factor(condition_count), log(inpatient_days + 0.5), color = cohort)) +
    geom_boxplot() +
    labs(title = "Inpatient days vs condition counts, unfiltered", x = "Condition count", y = "Log inpatient days")
```

#### Admits vs HCC counts, by cohort

```{r}
dff_filt %>%  ggplot(aes(as.factor(condition_count), log(inpatient_days + 0.5), color = cohort)) +
    geom_boxplot() +
    labs(title = "Admits vs condition counts, filtered", x = "Condition count", y = "Log admits")
```

#### Mean inpatient days per 1000 days, admissions, ER visits

```{r, echo = FALSE}
events %>%  left_join(cohorts, by = "pid") %>% group_by(cohort) %>%
    summarize(n = n(),
              inpat_days_per_1000 = mean(inpatient_days_per_1000),
              admits_per_1000 = mean(admits_per_1000),
              ER_per_1000 = mean(ER_per_1000)) %>% kable()

```

#### T test for inpatient days per 1000 patient-days

```{r}

mod <-  t.test(inpatient_days_per_1000 ~ cohort, data = events %>%  left_join(cohorts, by = "pid"))

tidy(mod)
```

#### T test for admits per 1000 patient-days

```{r}

mod <-  t.test(admits_per_1000 ~ cohort, data = events %>%  left_join(cohorts, by = "pid"))

tidy(mod)
```

### Proportion of at least one inpatient admit

Compare means; no adjustments

```{r, echo=FALSE}
#| label: prob admit

events %>% left_join(cohorts, by = "pid") %>%  group_by(cohort) %>%
    summarize(prop_admit = round(mean(inpatient_admit), 3)) %>% kable()
```

#### Proportions test

```{r}

admit_table <- events %>% inner_join(cohorts, by = "pid") %>%
    select(cohort, inpatient_admit) %>% table()

prop.test(admit_table[,2], c(sum(admit_table[1,]), sum(admit_table[2, ])))

```

#### Probability of `admit`; Adjust for `age` and `HCC scores`

-   Missing HCC scores imputed with the mean

```{r}
#| label: log reg prob admit

dff_filt_impute_hcc <- dff_filt %>% mutate(hcc = if_else(!is.na(hcc), hcc, mean(hcc, na.rm = TRUE)))

mod <- glm(inpatient_admit ~ age + hcc + cohort, data = dff_filt_impute_hcc, family = "binomial")
tidy(mod) %>% mutate(exp_estimate = exp(estimate)) # %>% kable()

```

-   Observations with missing HCC scores removed

```{r}
mod <- glm(inpatient_admit ~ age + hcc + cohort, data = dff_filt, family = "binomial")
tidy(mod) %>% mutate(exp_estimate = exp(estimate)) # %>% kable()

```

```{r}
mod %>% tidy() %>% filter(term!="(Intercept)") %>%
    ggplot(aes(term, estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin =
                          estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
    coord_flip() +
    geom_hline(yintercept = 0, color = "red") +
    labs(title = "Coefficient estimates and 95% confidence intervals", y = "estimate")

```

#### Try more predictors-conditions, and outcomes

-   emergency visits,
-   number of inpatient admissions
-   total inpatient_days,
-   probability of at least one admission
-   probability of no_utilization

#### Multicollinearity

**Conditioning number of the chronic conditions and hcc predictors**

```{r}
df <- dff_filt %>% select(-c(emergency, inpatient, inpatient_days, no_utilization,
                             pid, condition_count, hip_fracture, mild_cognitive_impairment,
                             lung_cancer, urologic_cancer, age, dementia,
                             colorectal_cancer, cataract,
                             days, inpatient_days_per_1000, admits_per_1000, ER_per_1000))
df <- df %>%  na.omit()
df_predictors <- df %>% select(-inpatient_admit, -cohort)

cor_mat <- cor(df_predictors)

lambdas <- eigen(cor_mat)$values
#sqrt(max(lambdas)/min(lambdas))

```

The conditioning number of the chronic conditions predictors, including hcc score, is `r sqrt(max(lambdas)/min(lambdas))`.

#### Logistic regression with certain chronic conditions predictors filtered

```{r}

mod <- glm(inpatient_admit ~ . ,
                                data = df, family = "binomial")

tidy(mod) %>%  mutate(exp_estimate = exp(estimate)) %>% print(n = 46) # %>% kable()

summary(mod)
```

```{r}
mod %>% tidy() %>% filter(term!="(Intercept)") %>%
    ggplot(aes(term, estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin =
                          estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
    coord_flip() +
    geom_hline(yintercept = 0, color = "red") +
    labs(title = "Coefficient estimates and 95% confidence intervals", y = "estimate")

```

#### Outcomes by HCC quantile (redundant with regression)

```{r}

patients %>% left_join(cohorts, by = "pid") %>% inner_join(events, by = "pid") %>% mutate(hcc_quantile = cut(hcc, breaks = quantile(hcc, na.rm = TRUE), labels = c("Q1", "Q2", "Q3", "Q4"))) %>% na.omit() %>%
              group_by(hcc_quantile, cohort) %>%
               summarize(
                   n = n(),
                   inpat_days_per_1000 = mean(inpatient_days_per_1000),
                   admits_per_1000 = mean(admits_per_1000),
                   ER_per_1000 = mean(ER_per_1000),
                    prop_admit = round(mean(inpatient_admit), 2),
                    prop_no_utilization = round(mean(no_utilization), 2)
                   ) %>% kable()


```

#### Inpatient days

**Zero inflated model**

`inpatient_days ~ hcc + age + cohort`

First repeat the logistic regression with the same predictors

```{r}
mod <- glm(inpatient_days ~ hcc + age + cohort, data = dff, family = "poisson")
summary(mod)
```

```{r}
#| label: total_admit_days
 mod <- zeroinfl(inpatient_days ~ hcc + age + cohort|hcc + cohort- 1, data = dff, dist = "poisson")
summary(mod)

#poisson_reg() %>%
 # set_engine("zeroinfl") %>%
  #fit(inpatient_days ~ hcc + age + cohort|hcc + cohort- 1, data = dff)

```

#### Inpatient admits

`inpatient ~ hcc + age + cohort`

**Poisson regression**

```{r}
df <- events %>% select(c(pid, inpatient)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

mod <- glm(inpatient ~ hcc + age + cohort, data = df, family = "poisson")
summary(mod)

```

**Zero inflated model**

```{r}
mod <- zeroinfl(inpatient ~ hcc + age + cohort|hcc + cohort- 1, data = dff, dist = "poisson")
summary(mod)
```

#### More predictors, colinearity, variance inflation

-   Remove low variance covariates- otherwise the conditioning number is infinite
-   Correlation and Eigen analysis for multicollinearity
-   Variance inflation factor

```{r}

rec <- recipe( ~., data = patients) %>%
    step_rm(c(pid, condition_count)) %>%
      step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(all_predictors()) %>%
    step_impute_knn(hcc)  # %>%


 patient_prep <- rec %>%  prep() %>% bake(patients)

 cor_mat <- cor(patient_prep)

eigs <- eigen(cor_mat)

```

The following were eliminated

```{r}
setdiff(names(patients), names(patient_prep))
```

The conditioning number of the predictors is `r sqrt(max(eigs$values)/min(eigs$values))`.

#### Variance inflation factor

These are all low.

```{r}
df <- events_filt %>% select(c(pid, inpatient)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

rec <- recipe(inpatient ~., data = df) %>%
    step_rm(c(condition_count)) %>%
       step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(-c(inpatient, cohort)) %>%
    step_impute_knn(hcc)  # %>%

df_prep <- rec %>%  prep() %>% bake(df)

#library(car)
vif(lm(inpatient ~ ., data =  df_prep))
```

#### Significance of versus null model

```{r}
#library(poissonreg)

mod_null <- glm(inpatient ~ 1, data = df_prep, family = "poisson")

mod_pois0 <- glm(inpatient ~ hcc + age + cohort, data = df_prep, family = "poisson")

mod_pois1 <- glm(inpatient ~ ., data = df_prep, family = "poisson")

mod_zinf0 <- zeroinfl(inpatient ~ hcc + age + cohort|1, data = df_prep, dist = "poisson")
#summary(mod_zinf0)

mod_zinf1 <- zeroinfl(inpatient ~ hcc + age + cohort|age + hcc + cohort, data = df_prep, dist = "poisson")

#mod_zinf1 <- zeroinfl(inpatient ~ .|hcc + cohort, data = df_prep, dist = "poisson")
#summary(mod_zinf1)

pchisq(2 * (logLik(mod_zinf1) - logLik(mod_zinf0)), df = 30, lower.tail = FALSE)

#library(lmtest)
waldtest(mod_zinf0, mod_zinf1)
```

#### Total inpatient days

```{r}
df <- events_filt %>% select(c(pid, inpatient_days)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

rec <- recipe(inpatient_days ~., data = df) %>%
    step_rm(c(condition_count)) %>%
       step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(-c(inpatient_days, cohort)) %>%
    step_impute_knn(hcc)  # %>%

df_prep <- rec %>%  prep() %>% bake(df)

mod_pois0 <- glm(inpatient_days ~ hcc + age + cohort, data = df_prep, family = "poisson")

summary(mod_pois0)

mod_pois1 <- glm(inpatient_days ~ ., data = df_prep, family = "poisson")
summary(mod_pois1)

mod_zinf0 <- zeroinfl(inpatient_days ~ hcc + age + cohort|1, data = df_prep, dist = "poisson")
summary(mod_zinf0)

mod_zinf1 <- zeroinfl(inpatient_days ~ hcc + age + cohort|age + hcc + cohort, data = df_prep, dist = "poisson")

#mod_zinf1 <- zeroinfl(inpatient ~ .|hcc + cohort, data = df_prep, dist = "poisson")
#summary(mod_zinf1)

#pchisq(2 * (logLik(mod_zinf1) - logLik(mod_zinf0)), df = 30, lower.tail = FALSE)

#library(lmtest)
#waldtest(mod_zinf0, mod_zinf1)

```

#### Proportion of at least one inpatient admit

All predictors

```{r}

### Proportion of at least one inpatient admit
df <- events %>% select(c(pid, inpatient_admit)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)


rec <- recipe(inpatient_admit ~ ., data = df) %>%
    step_rm(condition_count) %>%
          step_num2factor(inpatient_admit,  transform = function(x) x + 1,
                          levels = c("0", "1")) %>%
        step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)

df_prep <- rec %>%  prep() ## %>% bake(df)
tidy(df_prep, 2)

mod <- logistic_reg() %>%
    set_engine("glm")

flow <- workflow() %>%
    add_recipe(rec) %>%
    add_model(logistic_reg())

fit <-  flow %>% fit(data = df)

print(tidy(fit), n = Inf)
```

```{r}
fit %>% tidy() %>% filter(term!="(Intercept)") %>% filter(term !="lung_cancer") %>%
    ggplot(aes(fct_reorder(term, estimate), estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin =
                          estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
    coord_flip() +
    geom_hline(yintercept = 0, color = "red") +
    labs(title = "Coefficient estimates and 95% confidence intervals", y = "estimate")

```

## PCA analysis

We create new features, each of which is a linear combination of the original features, but the new features de-correlated. But the patient data are not strongle correlated.

```{r}

eigs <- eigen(cor_mat)

lambdas <- eigs$values

total_zvar <- lambdas %>% sum()
 lambdas %>% cumsum()/total_zvar

```

```{r}

df <- events_filt %>% select(c(pid, inpatient)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

recPCA <- recipe(inpatient ~., data = df) %>%
    step_rm(c(condition_count)) %>%
       step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(-c(inpatient, cohort)) %>%
    step_impute_knn(hcc)   %>%
    step_pca(all_numeric_predictors(), num_comp = 3)

prep <-  recPCA %>% prep()

tidy_pca <- tidy(prep, 5)

tidy_pca %>% filter(component %in% c("PC1", "PC2", "PC3")) %>%
    group_by(component) %>% top_n(6, abs(value)) %>%
    ungroup() %>%
    ggplot(aes(x = abs(value), y = terms, fill = value > 0)) +
    geom_col(show.legend = TRUE) +
    facet_wrap(~component, scales = "free_y") +
    labs(x = "Absolute score", y = NULL, fill = "Positive?")

```

#### Proportion of inpatient admit

**\`inpatient_admit \~ cohort + PCA components**

```{r}

df <- events_filt %>% select(c(pid, inpatient_admit)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

recPCA <- recipe(inpatient_admit ~., data = df) %>%
     step_num2factor(inpatient_admit,  transform = function(x) x + 1,
                          levels = c("0", "1")) %>%
    step_rm(c(condition_count)) %>%
       step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(-c(inpatient_admit, cohort)) %>%
    step_impute_knn(hcc)   %>%
    step_pca(all_numeric_predictors(), num_comp = 3)

df_prep <- recPCA %>%  prep() %>% bake(df)

mod <- logistic_reg() %>%
    set_engine("glm") %>%
    fit(inpatient_admit ~ ., data = df_prep)

mod %>% tidy()
```

```{r}
mod %>% tidy() %>% filter(term!="(Intercept)") %>%
    ggplot(aes(term, estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin =
                          estimate - 1.96*std.error, ymax = estimate + 1.96*std.error)) +
    coord_flip() +
    geom_hline(yintercept = 0, color = "red") +
    labs(title = "Coefficient estimates and 95% confidence intervals", y = "estimate")

```

**Using only one PCA component**

Not worth doing as there is not a lot of colinearity

```{r}

df <- events_filt %>% select(c(pid, inpatient_admit)) %>% inner_join(patients, by = "pid") %>% inner_join(cohorts, by = "pid") %>% select(-pid)

recPCA <- recipe(inpatient_admit ~., data = df) %>%
     step_num2factor(inpatient_admit,  transform = function(x) x + 1,
                          levels = c("0", "1")) %>%
    step_rm(c(condition_count)) %>%
       step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10)  %>%
    step_normalize(-c(inpatient_admit, cohort)) %>%
    step_impute_knn(hcc)   %>%
    step_pca(all_numeric_predictors(), num_comp = 1)

df_prep <- recPCA %>%  prep() %>% bake(df)

mod <- logistic_reg() %>%
    set_engine("glm") %>%
    fit(inpatient_admit ~ ., data = df_prep)

mod %>% tidy()
```

#### Total admission days

**cohort + PCA components**

```{r}
recPca <- recipe(inpatient_days ~ ., data = dff) %>%
    step_rm(c(hcc, emergency, inpatient_admit, inpatient, no_utilization)) %>%
    step_nzv(all_predictors(), freq_cut = 50, unique_cut = 10) %>%
   step_normalize(all_numeric_predictors()) %>%
    step_pca(all_numeric_predictors(), num_comp = 1)

df_bake <- recPca %>%  prep(dff) %>% bake(dff)

mod <- zeroinfl(inpatient_days ~ cohort + PC1, data = df_bake, dist = "poisson")
summary(mod)
```
